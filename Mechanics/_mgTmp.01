% MotionGenesis file:  MGTemplateBasic.txt
% Copyright (mot2) 2009-2020 Motion Genesis LLC.  Only for use with MotionGenesis.
%--------------------------------------------------------------------
%   Physical objects.
NewtonianFrame  plaqueBas                % Newtonian reference frame
RigidBody       mot1,mot2,mot3,	Bras1Debut,Bras2Debut,Bras3Debut,	Bras1Fin,Bras2Fin,Bras3Fin,	PlaqueTop  
%plaqueBas = plaque bas
%BCD = moteur
%EFG = bras 1
%HLM = bras 2
%NOP = joint pivot
%PlaqueTop = plaque top
Point           posMot1(plaqueBas),posMot2(plaqueBas),posMot3(plaqueBas)		%plaque bas
Point			axeMot1(mot1),axeMot2(mot2),axeMot3(mot3)		%moteurs
Point			bras1Middle(Bras1Debut),bras2Middle(Bras2Debut),bras3Middle(Bras3Debut)		%Bras 1
Point			bras1End(Bras1Fin),bras2End(Bras2Fin),bras3End(Bras3Fin)		%Bras 2 
Point			P1Plaque(PlaqueTop),P2Plaque(PlaqueTop),P3Plaque(PlaqueTop)		%plaque top % 
%--------------------------------------------------------------------
%   Mathematical declarations.
Variable	angleBras1Middle'',angleBras2Middle'',angleBras3Middle''			%angle bras 2
choice = 1 	% 1= positionPlaqueInputAngleMoteurOutput
% 2= positionAngleMoteurInputPlaqueOutput
Variable   	angleMot1'',angleMot2'',angleMot3''			%angle bras 1
specified 	anglePlaqueTop_x'',anglePlaqueTop_y''      	%angle plaque top
%specified	eR0'',eR1'',eR2'',eR3''
specified 	hauteurPlaqueTop''		%position des centres de masse de la plaque du haut par rapport plaque du bas
Variable 	anglePlaqueTop_z'', distancePlaqueTop_x'',distancePlaqueTop_y''
constant	rayonDistanceAncrage = 133.33 mm	%distance entre Bras2Fin'ancrage de la plaque du haut et du pivot par rapport au centre de masse de la plaque
constant 	rayonDistanceMoteur = (133.33+15) mm
constant	hauteurAxeMoteur = 28.63 mm
constant 	longueurBras1 = 3 in
constant	longueurBras2 = 4 in
constant	rayonDistanceAncrageEtPivot = (133.33+15) mm
%--------------------------------------------------------------------
%   Mass and inertia properties.
%PlaqueTop.SetMass(mR = 44.39 grams)
%chargeAppliquerSurPlaque.setMass(masseCharge)
%PlaqueTop.setInertia(Rcm, IRxx = 78730.95 grams*mm^2 , IRyy = 78730.95 grams*mm^2, IRzz = 157163.35 grams*mm^2)
%--------------------------------------------------------------------
%   Rotational kinematics.
mot1.RotateZ(plaqueBas, 0*ConvertUnits(deg,rad))
mot2.RotateZ(plaqueBas, -120*ConvertUnits(deg,rad))
mot3.RotateZ(plaqueBas, 120*ConvertUnits(deg,rad))
Bras1Debut.RotateX(mot1,angleMot1)
Bras2Debut.RotateX(mot2,angleMot2)
Bras3Debut.RotateX(mot3,angleMot3)
Bras1Fin.RotateX(Bras1Debut,-angleBras1Middle)
Bras2Fin.RotateX(Bras2Debut,-angleBras2Middle)
Bras3Fin.RotateX(Bras3Debut,-angleBras3Middle)
PlaqueTop.Rotate(plaqueBas,bodyXYZ,anglePlaqueTop_x,anglePlaqueTop_y,anglePlaqueTop_z)
%PlaqueTop.setRotationMatrixODE(plaqueBas,Euler,eR0,eR1,eR2,eR3)
%--------------------------------------------------------------------
%   Translational kinematics.
posMot1.Translate(PlaqueBaso,rayonDistanceMoteur*plaqueBasy>)															%position moteur 1
posMot2.Translate(PlaqueBaso,rayonDistanceMoteur*cosDegrees(30)*plaqueBasx> - rayonDistanceMoteur*sinDegrees(30)*plaqueBasy>)	%position moteur 2
posMot3.Translate(PlaqueBaso,-rayonDistanceMoteur*cosDegrees(30)*plaqueBasx> - rayonDistanceMoteur*sinDegrees(30)*plaqueBasy>)	%position moteur 3
axeMot1.translate(posMot1, hauteurAxeMoteur*mot1z>)
axeMot2.translate(posMot2, hauteurAxeMoteur*mot2z>)
axeMot3.translate(posMot3, hauteurAxeMoteur*mot3z>)
bras1Middle.translate(axeMot1, longueurBras1*Bras1Debuty>)
bras2Middle.translate(axeMot2, longueurBras1*Bras2Debuty>)
bras3Middle.translate(axeMot3, longueurBras1*Bras3Debuty>)
bras1End.translate(bras1Middle, -longueurBras2*Bras1Finy>)
bras2End.translate(bras2Middle, -longueurBras2*Bras2Finy>)
bras3End.translate(bras3Middle, -longueurBras2*Bras3Finy>)
PlaqueTopo.translate(PlaqueBaso, distancePlaqueTop_x*plaqueBasx> + distancePlaqueTop_y*plaqueBasy> + hauteurPlaqueTop*plaqueBasz>)
P1Plaque.translate(PlaqueTopo, rayonDistanceAncrageEtPivot*plaqueTopy>)
P2Plaque.translate(PlaqueTopo,rayonDistanceAncrageEtPivot*cosDegrees(30)*plaqueTopx> - rayonDistanceAncrageEtPivot*sinDegrees(30)*plaqueTopy>)	
P3Plaque.translate(PlaqueTopo,-rayonDistanceAncrageEtPivot*cosDegrees(30)*plaqueTopx> - rayonDistanceAncrageEtPivot*sinDegrees(30)*plaqueTopy>)
%--------------------------------------------------------------------
%   Motion constraints (if any).
contrainte[1] = bras1End.GetPosition(PlaqueBaso)-P1Plaque.GetPosition(PlaqueBaso)
contrainte[2] = bras2End.GetPosition(PlaqueBaso)-P2Plaque.GetPosition(PlaqueBaso)
contrainte[3] = bras3End.GetPosition(PlaqueBaso)-P3Plaque.GetPosition(PlaqueBaso)
MotionConstraint[1] = dot(contrainte[1],plaqueBasx>)
MotionConstraint[2] = dot(contrainte[1],plaqueBasy>)
MotionConstraint[3] = dot(contrainte[1],plaqueBasz>)
MotionConstraint[4] = dot(contrainte[2],plaqueBasx>)
MotionConstraint[5] = dot(contrainte[2],plaqueBasy>)
MotionConstraint[6] = dot(contrainte[2],plaqueBasz>)
MotionConstraint[7] = dot(contrainte[3],plaqueBasx>)
MotionConstraint[8] = dot(contrainte[3],plaqueBasy>)
MotionConstraint[9] = dot(contrainte[3],plaqueBasz>)
%MotionConstraint[10] = getAngleBetweenVector(mot1y>, Bras1Debuty>)+getAngleBetweenVector(Bras1Debuty>, Bras1Finy>)+getAngleBetweenVector(Bras1Finy>, axeMot1.GetUnitVector(bras1end))-180*convertunits(deg, rad)
%MotionConstraint[11] = getAngleBetweenVector(mot2y>, Bras2Debuty>)+getAngleBetweenVector(Bras2Debuty>, Bras2Finy>)+getAngleBetweenVector(Bras2Finy>, axeMot2.GetUnitVector(bras2end))-180*convertunits(deg, rad)
%MotionConstraint[12] = getAngleBetweenVector(mot3y>, Bras3Debuty>)+getAngleBetweenVector(Bras3Debuty>, Bras3Finy>)+getAngleBetweenVector(Bras3Finy>, axeMot3.GetUnitVector(bras3end))-180*convertunits(deg, rad)
%--------------------------------------------------------------------
%   Add relevant contact/distance forces.
%chargeAppliquerSurPlaque.AddForce(-Bras3Debut*masseCharge*Az>)
%pause
%--------------------------------------------------------------------
%--------------------------------------------------------------------
%   Solve algebraic equations for list of unknowns.
%Solve( [Dynamics;motionconstraint],qA'',qB'',X'',Fx,Fz,Fwx,Fwz )
% 1= positionPlaqueInputAngleMoteurOutput
% 2= positionAngleMoteurInputPlaqueOutput
% on veut avoir comme reponse hauteurPlaqueTop, anglePlaqueTop_x et anglePlaqueTop_y
%output angleMot1 deg, angleMot2 deg, angleMot3 deg
input anglePlaqueTop_x = 0 deg, anglePlaqueTop_y = 10 deg, hauteurPlaqueTop = 92.35 mm
solve( [motionconstraint], distancePlaqueTop_x = 0 mm, distancePlaqueTop_y = 0 mm, anglePlaqueTop_z = 0 mm, angleMot1 = 0 deg, angleMot2 = 0 deg, angleMot3 = 0 deg, angleBras1Middle = 41.19 deg, angleBras2Middle = 41.19 deg, angleBras3Middle = 41.19 deg)
outputencode angleMot1 deg, anglemot2 deg, anglemot3 deg
code nonlinear([motionconstraint], distancePlaqueTop_x, distancePlaqueTop_y, anglePlaqueTop_z, angleMot1, angleMot2, angleMot3, angleBras1Middle, angleBras2Middle, angleBras3Middle) test.m(anglePlaqueTop_x deg, anglePlaqueTop_y deg, hauteurPlaqueTop mm)
